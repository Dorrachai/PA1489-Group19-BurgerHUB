Diary for Tuva Rutberg
-------------------------------
4/10
CHANGED GROUP

17/9
We have decidedas group have decided to work with the assignment twice
a week - Tuesdays and Thursdays. We're will use VsCode. There's one 
person who hasn't shown up yet. We decided to give the person another
chance to join on Thursday. Today, we're looking into how to link to a 
repository on GitHub:
    - Each time you want to upload something, you need to pull first
    before you can push
    - Git add .
    - Git commit -m "message"
    - Git push origin (branch name)

19/9
We created a Discord server for group communication. We tried to commit
files to Git but failed.

24/9
Transferred the assignment description to README.md; will refine it later

-------------------------------

CHANGED GROUP

8/10
First meeting with the new group:
They have made a lot of progress, and I'm keeping up as best as I can.
I've been added to their GitHub and have cloned the repository. I created
my own branch using the command git branch -c "name". Then used 
git switch "branch name" to switch to that brand. I've created my own 
menu for my burger and have been granted access to commit to the GitHub repository. 
I've added a picture, burger to menu csv and html for krabbypatty

9/10
A merge issue occurred in Git that caused the frontend branch to malfunction. 
After investigating, we decided to delete the problematic branch and create a new one.
Locally, I removed the previous branch and repository from my computer and performed 
a fresh clone to ensure everything was in sync. 
Some of the commands used:
git add ,to stage files
git commit ,to commit the changes with appropriate messages
git status ,to track current state of the working directory

10/10
I created a stylesheet for the order success page, using 'inherit' to apply the 
same font as the 'parent file'. I made changes in the routes to ensure the page renders. 
I'm working on centering the order success text. I managed to move it by using margin to remove 
the spacing.

11/10
I tried to add an order number the order success page. It was pretty difficult, I could not make it work.  

15/10
Reflection and working on the writing part of the assignment

16/10
Same as the day before

17/10
Debug session:
1.During this debug session, I chose to examine the showOrders() function, which retrieves and returns the data from a database. My goal was to understand how the function handles the database queries, logs the results, and closes the database connection. I also wanted to test different scenarios to see how the code reacts to different types of inputs and errors.

2.Setting breakpoints
The file: PA1489-GROUP19-BURGERHUB/burgerHub/containers/kitchenviews.js
I started by setting breakpoints at strategic points in the code to track how it executes. 

The first breakpoint was set on the line where the SQL query is sent to the database:
const [rows] = await db.execute(sql); (This line is critical as it is where the communication with the database happens, and the data is fetched)

The second breakpoint was set on the line where the data is logged:
console.table(rows); 

The final breakpoint was on the last line where the database connection is closed:
await db.end();

I wanted to make sure that the database connection was properly closed after the query was executed.

3.The debug session
When i ran the debug, the program paused at the first breakpoint where the SQL query was executed. Here, I used "Step over" since i didn't need to dive into the database connection library, i focused on the information being fetched instead.
At the next breakpoint, I was able to inspect rows. which contained the result of the SQL query. Seeing this gave me clear understanding of how the data was structured and handled. I also confirmed that the SQL was correctly formatted before it was sent, by inspecting its value in the debugger.

4.Watching variables
I watched the variable rows during the session to see how it changed throughout the execution.
Initially the variable was undefined before the SQL query was executed.
After executing the variable was populated with data from the database, as expected. Seeing this "real-time" change in the variable was helpful in understanding how data flow through the code.

5.Testing different paths through the functionally
I tested various scenarios to see how the code handled different situations:
Normal execution: When I ran a normal SQL query (SELECT * FROM OrdersTb; ), the orders were fetched as expected. Everything worked as it should, and the database connection closed properly afterward.
Empty result: I modified the SQL query to something that would return no results ( SELECT * FROM OrdersTB WHERE 1=0; ). In this case, rows became an empty array, which the program handled without issues. 

Reflection and summary
What went well?
I was able follow the flow through the code and see how the data was fetched and logged correctly. The debug session made it easier to understand what was happening at each step, especially with regards to the database queries.

What was easy?
Setting the breakpoints and using tools like "step over" and "step into" to move through the code was simple. Watching variables like rows made it easy to track the data throughout the execution.

What was difficult?
It was difficult to keep track of exactly when certain lines of code were executed, especially with the use of "await", as it makes the program wait for some operations to complete.

Can debugging be a useful tool for me?
Yes, debugging seems very useful, especially when working with complex systems. Being able to see what is happening in real-time makes it much easier to identify errors and optimize code. 
