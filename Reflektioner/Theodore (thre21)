Diary for Theodore Reangpusri
-------------------------------

18/9:
Today I got access to the course, I quickly formed a group with two other members and we started the preplanning phase for this project. 
Pre-planning consisted of work distribution, strenghts and weaknesses of each member, tools/frameworks/languages to use, git and github setup and initial
testing of committing code to the same repo using different branches. I was responisble for helping my project-partners with the git setup and branch management
as I had some prior experience with using git and github. After our first test commits and pushes we merged the content of each brain into the main branch
and reviewed our merg-requests in order to find poential conflicts. No conflicts were found and we could merge everything with ease. 
------------------------------------------------------------------------------------------------------------------------------------------------------------
19/9:
We started the day by checking our issue board on Trello in order to see what we should do for the day. We were able to mark a majority of the tasks as done
as all of our members had git up and working and due to us deeming our research as done. This day we spent time on creating our menus and discussing limitations
of the BurgerHub store. We did also edit eachothers files from our own branches and members own created branches and published the changes to github in order to practice collaboration. Everything was merged succesfully and Assignment 1 had been completed.
------------------------------------------------------------------------------------------------------------------------------------------------------------
20/9:
Today we contacted Mikael to check if we were on the right track in this project and ask questions about assignment 2. Our questions were answered and we started working on Assignment 2 by database coding and docker setup.

------------------------------------------------------------------------------------------------------------------------------------------------------------
23/9:
The official start of assignment 2 we started the creation of setups. We sat in a group and did some pair programming. I spent most of the time trying to implement docker into our project. Even though familliar with docker I rarely use it myself and spent a lot of time with little to no success in implementing it. 
----------------------------------------------------------------------------------------------------------------------------------  ---------------------------
24/9:
Today we focused on setting up our ddocker containers to work with our backend code. The resuslt were successful as we were able to connect to our database via docker, now we only need to add frontend,functionality and a correct redirect for this assignment to be considered as complete.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
27/9:
I missed two days of work due to  traveling as I am moving to 日本. I will try to catch up on the work I missed by working extra hard on the days I am able to work. Timezones are making it difficult with meeting but we are communicating a lot via messages and I plan my days to work after the swedish timezone, for the sake of my lab partners.
This day I went trough our repo to read and check updates. I plan to do some frontend work this weekend. 
-------------------------------------------------------------------------------------------------------------------------------------------------------------
3/10:
This day we had a meeting. I was mainly working on getting the docker to work which was a success. it is now possible to run everything by just composing docker however the database is empty. I will work on that next time.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
7/10:
Worked together to solve the error with database being empty. However little progress. We managed to fix so that is it possible to place an order no as the routes were wrong before.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
11/10: Started work with the place order function. At the start of this session the place order does not save anything on the database. Solved this problem by changing incorrect paths/routes.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
16/10:
I spent some time writing on the assignment 2 report. 
Later in the day I configured automated Cypress tests for end-to-end testing of the UI, making sure burger orders could be placed, dropdown menus worked 
and the process could go on without interruptioon. I also worked on setting up Jest for backend tests, but ran into some issues with module paths and chose to do that tomorrow instead.
A problem that "double trouble" burger tests did not work as inteded occured. My theory is that the burger uses a different name in the database, however when manually testing the named burger no problems occured.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
17/10: I tackled the Jest testing errors. After troubleshooting I corrected the file paths in both burgerorderer.js and kitchenview.js. 
I also wrote unit tests to mock the database, ensuring that functions for fetching burgers and placing orders work correctly. The files will be ready to merge after my lab members tests my branch.
-------------------------------------------------------------------------------------------------------------------------------------------------------------

Chosen Functionality:

I chose to debug the showOrders function from kitchenview.js. This function is responsible for retrieving and displaying all orders from the database for the kitchen to process. It is part of a key part of the system since it directly affects the kitchen’s workflow.

Breakpoints:

I placed a breakpoint at line 15 where the SQL query is executed to fetch orders from the OrdersTb table. This seemed like the ideal spot because it is where the program interacts with the database to get order details such as the burger name, sides, and drinks.

Using the Debugger Buttons:

Once the debugger hit my breakpoint, I used Step Over to move line by line and see the results of the SQL query. I wanted to observe the query execution without diving too deep into internal SQL processes, so I didn’t use Step Into. I also used Continue to skip over multiple lines of code until I needed to stop again at a critical point.

Watching Variables:

The key variable I watched was rows, as it stored the query result with all the orders. By watching this variable, I could see what data was being retrieved from the database after the query ran. I also monitored orders, which processes the rows variable into a format that can be displayed to the kitchen.

Value Observations:

After stepping over the SQL query I noted that rows contained an array of objects, each representing an order. Each object had fields like burger, sides, and drink. I also watched how the orders variable structured this data to ensure that all details were correctly processed.

Testing Different Scenarios:

I tested different scenarios, such as retrieving multiple orders and testing with an empty database. When there were no orders in the database the rows variable returned an empty array which the function handled correctly by returning an empty list to the UI.

Summary and Reflection:

	•	What Went Well: I successfully tracked how the showOrders function retrieved and processed data from the database. Watching the rows and orders variables allowed me to verify that the data was being processed correctly.
	•	Challenges: Debugging asynchronous code took some time to understand, especially as the code dealt with promises. It required patience to step through the promises correctly.
	•	Ease of Use: Watching variables and stepping through simpler parts of the code was intuitive once I got the hang of it.

Is Debugging Useful?

Debugging was quite helpful in understanding the processes in the function. However for simpler tasks, using console.log() might have been a quicker way to check values (something I did when checking if data was saved on the db) but debugging is good in more complex scenarios where tracking variable changes over time is essential.

-------------------------------------------------------------------------------------------------------------------------------------------------------------
18/10: Today was our final day. We checked the reports and did some finall touches. All in all this project was fun but a bit too big for such a small group with little knowledge. Personally for me it was difficult to arrange meetings with my groups due to timezones but we managed to work together anyways and had a transparent communication. 

